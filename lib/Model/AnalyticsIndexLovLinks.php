<?php
/**
 * AnalyticsIndexLovLinks
 *
 * PHP version 5
 *
 * @category Class
 * @package  EffetB\BeezupApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BeezUP API
 *
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * OpenAPI spec version: 2.0
 * Contact: help@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EffetB\BeezupApi\Model;

use \ArrayAccess;
use \EffetB\BeezupApi\ObjectSerializer;

/**
 * AnalyticsIndexLovLinks Class Doc Comment
 *
 * @category Class
 * @package  EffetB\BeezupApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnalyticsIndexLovLinks implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'analyticsIndexLovLinks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'performance_indicator_type_lov' => '\EffetB\BeezupApi\Model\BeezUPCommonLOVLink3',
        'performance_indicator_type_for_reports_by_channel_lov' => '\EffetB\BeezupApi\Model\BeezUPCommonLOVLink3',
        'performance_indicator_type_for_reports_by_category_lov' => '\EffetB\BeezupApi\Model\BeezUPCommonLOVLink3',
        'performance_indicator_type_for_reports_by_product_lov' => '\EffetB\BeezupApi\Model\BeezUPCommonLOVLink3',
        'performance_indicator_formula_parameter_type_lov' => '\EffetB\BeezupApi\Model\BeezUPCommonLOVLink3',
        'performance_indicator_formula_operator_name_lov' => '\EffetB\BeezupApi\Model\BeezUPCommonLOVLink3',
        'performance_indicator_filter_operator_name_lov' => '\EffetB\BeezupApi\Model\BeezUPCommonLOVLink3',
        'analytics_product_column_filter_operator_name_lov' => '\EffetB\BeezupApi\Model\BeezUPCommonLOVLink3',
        'analytics_numerical_product_column_filter_operator_name_lov' => '\EffetB\BeezupApi\Model\BeezUPCommonLOVLink3',
        'analytics_string_product_column_filter_operator_name_lov' => '\EffetB\BeezupApi\Model\BeezUPCommonLOVLink3',
        'store_optimisation_rule_execution_status_lov' => '\EffetB\BeezupApi\Model\BeezUPCommonLOVLink3'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'performance_indicator_type_lov' => null,
        'performance_indicator_type_for_reports_by_channel_lov' => null,
        'performance_indicator_type_for_reports_by_category_lov' => null,
        'performance_indicator_type_for_reports_by_product_lov' => null,
        'performance_indicator_formula_parameter_type_lov' => null,
        'performance_indicator_formula_operator_name_lov' => null,
        'performance_indicator_filter_operator_name_lov' => null,
        'analytics_product_column_filter_operator_name_lov' => null,
        'analytics_numerical_product_column_filter_operator_name_lov' => null,
        'analytics_string_product_column_filter_operator_name_lov' => null,
        'store_optimisation_rule_execution_status_lov' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'performance_indicator_type_lov' => 'performanceIndicatorTypeLov',
        'performance_indicator_type_for_reports_by_channel_lov' => 'performanceIndicatorTypeForReportsByChannelLov',
        'performance_indicator_type_for_reports_by_category_lov' => 'performanceIndicatorTypeForReportsByCategoryLov',
        'performance_indicator_type_for_reports_by_product_lov' => 'performanceIndicatorTypeForReportsByProductLov',
        'performance_indicator_formula_parameter_type_lov' => 'performanceIndicatorFormulaParameterTypeLov',
        'performance_indicator_formula_operator_name_lov' => 'performanceIndicatorFormulaOperatorNameLov',
        'performance_indicator_filter_operator_name_lov' => 'performanceIndicatorFilterOperatorNameLov',
        'analytics_product_column_filter_operator_name_lov' => 'analyticsProductColumnFilterOperatorNameLov',
        'analytics_numerical_product_column_filter_operator_name_lov' => 'analyticsNumericalProductColumnFilterOperatorNameLov',
        'analytics_string_product_column_filter_operator_name_lov' => 'analyticsStringProductColumnFilterOperatorNameLov',
        'store_optimisation_rule_execution_status_lov' => 'storeOptimisationRuleExecutionStatusLov'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'performance_indicator_type_lov' => 'setPerformanceIndicatorTypeLov',
        'performance_indicator_type_for_reports_by_channel_lov' => 'setPerformanceIndicatorTypeForReportsByChannelLov',
        'performance_indicator_type_for_reports_by_category_lov' => 'setPerformanceIndicatorTypeForReportsByCategoryLov',
        'performance_indicator_type_for_reports_by_product_lov' => 'setPerformanceIndicatorTypeForReportsByProductLov',
        'performance_indicator_formula_parameter_type_lov' => 'setPerformanceIndicatorFormulaParameterTypeLov',
        'performance_indicator_formula_operator_name_lov' => 'setPerformanceIndicatorFormulaOperatorNameLov',
        'performance_indicator_filter_operator_name_lov' => 'setPerformanceIndicatorFilterOperatorNameLov',
        'analytics_product_column_filter_operator_name_lov' => 'setAnalyticsProductColumnFilterOperatorNameLov',
        'analytics_numerical_product_column_filter_operator_name_lov' => 'setAnalyticsNumericalProductColumnFilterOperatorNameLov',
        'analytics_string_product_column_filter_operator_name_lov' => 'setAnalyticsStringProductColumnFilterOperatorNameLov',
        'store_optimisation_rule_execution_status_lov' => 'setStoreOptimisationRuleExecutionStatusLov'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'performance_indicator_type_lov' => 'getPerformanceIndicatorTypeLov',
        'performance_indicator_type_for_reports_by_channel_lov' => 'getPerformanceIndicatorTypeForReportsByChannelLov',
        'performance_indicator_type_for_reports_by_category_lov' => 'getPerformanceIndicatorTypeForReportsByCategoryLov',
        'performance_indicator_type_for_reports_by_product_lov' => 'getPerformanceIndicatorTypeForReportsByProductLov',
        'performance_indicator_formula_parameter_type_lov' => 'getPerformanceIndicatorFormulaParameterTypeLov',
        'performance_indicator_formula_operator_name_lov' => 'getPerformanceIndicatorFormulaOperatorNameLov',
        'performance_indicator_filter_operator_name_lov' => 'getPerformanceIndicatorFilterOperatorNameLov',
        'analytics_product_column_filter_operator_name_lov' => 'getAnalyticsProductColumnFilterOperatorNameLov',
        'analytics_numerical_product_column_filter_operator_name_lov' => 'getAnalyticsNumericalProductColumnFilterOperatorNameLov',
        'analytics_string_product_column_filter_operator_name_lov' => 'getAnalyticsStringProductColumnFilterOperatorNameLov',
        'store_optimisation_rule_execution_status_lov' => 'getStoreOptimisationRuleExecutionStatusLov'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['performance_indicator_type_lov'] = isset($data['performance_indicator_type_lov']) ? $data['performance_indicator_type_lov'] : null;
        $this->container['performance_indicator_type_for_reports_by_channel_lov'] = isset($data['performance_indicator_type_for_reports_by_channel_lov']) ? $data['performance_indicator_type_for_reports_by_channel_lov'] : null;
        $this->container['performance_indicator_type_for_reports_by_category_lov'] = isset($data['performance_indicator_type_for_reports_by_category_lov']) ? $data['performance_indicator_type_for_reports_by_category_lov'] : null;
        $this->container['performance_indicator_type_for_reports_by_product_lov'] = isset($data['performance_indicator_type_for_reports_by_product_lov']) ? $data['performance_indicator_type_for_reports_by_product_lov'] : null;
        $this->container['performance_indicator_formula_parameter_type_lov'] = isset($data['performance_indicator_formula_parameter_type_lov']) ? $data['performance_indicator_formula_parameter_type_lov'] : null;
        $this->container['performance_indicator_formula_operator_name_lov'] = isset($data['performance_indicator_formula_operator_name_lov']) ? $data['performance_indicator_formula_operator_name_lov'] : null;
        $this->container['performance_indicator_filter_operator_name_lov'] = isset($data['performance_indicator_filter_operator_name_lov']) ? $data['performance_indicator_filter_operator_name_lov'] : null;
        $this->container['analytics_product_column_filter_operator_name_lov'] = isset($data['analytics_product_column_filter_operator_name_lov']) ? $data['analytics_product_column_filter_operator_name_lov'] : null;
        $this->container['analytics_numerical_product_column_filter_operator_name_lov'] = isset($data['analytics_numerical_product_column_filter_operator_name_lov']) ? $data['analytics_numerical_product_column_filter_operator_name_lov'] : null;
        $this->container['analytics_string_product_column_filter_operator_name_lov'] = isset($data['analytics_string_product_column_filter_operator_name_lov']) ? $data['analytics_string_product_column_filter_operator_name_lov'] : null;
        $this->container['store_optimisation_rule_execution_status_lov'] = isset($data['store_optimisation_rule_execution_status_lov']) ? $data['store_optimisation_rule_execution_status_lov'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets performance_indicator_type_lov
     *
     * @return \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3
     */
    public function getPerformanceIndicatorTypeLov()
    {
        return $this->container['performance_indicator_type_lov'];
    }

    /**
     * Sets performance_indicator_type_lov
     *
     * @param \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3 $performance_indicator_type_lov performance_indicator_type_lov
     *
     * @return $this
     */
    public function setPerformanceIndicatorTypeLov($performance_indicator_type_lov)
    {
        $this->container['performance_indicator_type_lov'] = $performance_indicator_type_lov;

        return $this;
    }

    /**
     * Gets performance_indicator_type_for_reports_by_channel_lov
     *
     * @return \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3
     */
    public function getPerformanceIndicatorTypeForReportsByChannelLov()
    {
        return $this->container['performance_indicator_type_for_reports_by_channel_lov'];
    }

    /**
     * Sets performance_indicator_type_for_reports_by_channel_lov
     *
     * @param \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3 $performance_indicator_type_for_reports_by_channel_lov performance_indicator_type_for_reports_by_channel_lov
     *
     * @return $this
     */
    public function setPerformanceIndicatorTypeForReportsByChannelLov($performance_indicator_type_for_reports_by_channel_lov)
    {
        $this->container['performance_indicator_type_for_reports_by_channel_lov'] = $performance_indicator_type_for_reports_by_channel_lov;

        return $this;
    }

    /**
     * Gets performance_indicator_type_for_reports_by_category_lov
     *
     * @return \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3
     */
    public function getPerformanceIndicatorTypeForReportsByCategoryLov()
    {
        return $this->container['performance_indicator_type_for_reports_by_category_lov'];
    }

    /**
     * Sets performance_indicator_type_for_reports_by_category_lov
     *
     * @param \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3 $performance_indicator_type_for_reports_by_category_lov performance_indicator_type_for_reports_by_category_lov
     *
     * @return $this
     */
    public function setPerformanceIndicatorTypeForReportsByCategoryLov($performance_indicator_type_for_reports_by_category_lov)
    {
        $this->container['performance_indicator_type_for_reports_by_category_lov'] = $performance_indicator_type_for_reports_by_category_lov;

        return $this;
    }

    /**
     * Gets performance_indicator_type_for_reports_by_product_lov
     *
     * @return \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3
     */
    public function getPerformanceIndicatorTypeForReportsByProductLov()
    {
        return $this->container['performance_indicator_type_for_reports_by_product_lov'];
    }

    /**
     * Sets performance_indicator_type_for_reports_by_product_lov
     *
     * @param \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3 $performance_indicator_type_for_reports_by_product_lov performance_indicator_type_for_reports_by_product_lov
     *
     * @return $this
     */
    public function setPerformanceIndicatorTypeForReportsByProductLov($performance_indicator_type_for_reports_by_product_lov)
    {
        $this->container['performance_indicator_type_for_reports_by_product_lov'] = $performance_indicator_type_for_reports_by_product_lov;

        return $this;
    }

    /**
     * Gets performance_indicator_formula_parameter_type_lov
     *
     * @return \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3
     */
    public function getPerformanceIndicatorFormulaParameterTypeLov()
    {
        return $this->container['performance_indicator_formula_parameter_type_lov'];
    }

    /**
     * Sets performance_indicator_formula_parameter_type_lov
     *
     * @param \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3 $performance_indicator_formula_parameter_type_lov performance_indicator_formula_parameter_type_lov
     *
     * @return $this
     */
    public function setPerformanceIndicatorFormulaParameterTypeLov($performance_indicator_formula_parameter_type_lov)
    {
        $this->container['performance_indicator_formula_parameter_type_lov'] = $performance_indicator_formula_parameter_type_lov;

        return $this;
    }

    /**
     * Gets performance_indicator_formula_operator_name_lov
     *
     * @return \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3
     */
    public function getPerformanceIndicatorFormulaOperatorNameLov()
    {
        return $this->container['performance_indicator_formula_operator_name_lov'];
    }

    /**
     * Sets performance_indicator_formula_operator_name_lov
     *
     * @param \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3 $performance_indicator_formula_operator_name_lov performance_indicator_formula_operator_name_lov
     *
     * @return $this
     */
    public function setPerformanceIndicatorFormulaOperatorNameLov($performance_indicator_formula_operator_name_lov)
    {
        $this->container['performance_indicator_formula_operator_name_lov'] = $performance_indicator_formula_operator_name_lov;

        return $this;
    }

    /**
     * Gets performance_indicator_filter_operator_name_lov
     *
     * @return \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3
     */
    public function getPerformanceIndicatorFilterOperatorNameLov()
    {
        return $this->container['performance_indicator_filter_operator_name_lov'];
    }

    /**
     * Sets performance_indicator_filter_operator_name_lov
     *
     * @param \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3 $performance_indicator_filter_operator_name_lov performance_indicator_filter_operator_name_lov
     *
     * @return $this
     */
    public function setPerformanceIndicatorFilterOperatorNameLov($performance_indicator_filter_operator_name_lov)
    {
        $this->container['performance_indicator_filter_operator_name_lov'] = $performance_indicator_filter_operator_name_lov;

        return $this;
    }

    /**
     * Gets analytics_product_column_filter_operator_name_lov
     *
     * @return \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3
     */
    public function getAnalyticsProductColumnFilterOperatorNameLov()
    {
        return $this->container['analytics_product_column_filter_operator_name_lov'];
    }

    /**
     * Sets analytics_product_column_filter_operator_name_lov
     *
     * @param \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3 $analytics_product_column_filter_operator_name_lov analytics_product_column_filter_operator_name_lov
     *
     * @return $this
     */
    public function setAnalyticsProductColumnFilterOperatorNameLov($analytics_product_column_filter_operator_name_lov)
    {
        $this->container['analytics_product_column_filter_operator_name_lov'] = $analytics_product_column_filter_operator_name_lov;

        return $this;
    }

    /**
     * Gets analytics_numerical_product_column_filter_operator_name_lov
     *
     * @return \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3
     */
    public function getAnalyticsNumericalProductColumnFilterOperatorNameLov()
    {
        return $this->container['analytics_numerical_product_column_filter_operator_name_lov'];
    }

    /**
     * Sets analytics_numerical_product_column_filter_operator_name_lov
     *
     * @param \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3 $analytics_numerical_product_column_filter_operator_name_lov analytics_numerical_product_column_filter_operator_name_lov
     *
     * @return $this
     */
    public function setAnalyticsNumericalProductColumnFilterOperatorNameLov($analytics_numerical_product_column_filter_operator_name_lov)
    {
        $this->container['analytics_numerical_product_column_filter_operator_name_lov'] = $analytics_numerical_product_column_filter_operator_name_lov;

        return $this;
    }

    /**
     * Gets analytics_string_product_column_filter_operator_name_lov
     *
     * @return \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3
     */
    public function getAnalyticsStringProductColumnFilterOperatorNameLov()
    {
        return $this->container['analytics_string_product_column_filter_operator_name_lov'];
    }

    /**
     * Sets analytics_string_product_column_filter_operator_name_lov
     *
     * @param \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3 $analytics_string_product_column_filter_operator_name_lov analytics_string_product_column_filter_operator_name_lov
     *
     * @return $this
     */
    public function setAnalyticsStringProductColumnFilterOperatorNameLov($analytics_string_product_column_filter_operator_name_lov)
    {
        $this->container['analytics_string_product_column_filter_operator_name_lov'] = $analytics_string_product_column_filter_operator_name_lov;

        return $this;
    }

    /**
     * Gets store_optimisation_rule_execution_status_lov
     *
     * @return \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3
     */
    public function getStoreOptimisationRuleExecutionStatusLov()
    {
        return $this->container['store_optimisation_rule_execution_status_lov'];
    }

    /**
     * Sets store_optimisation_rule_execution_status_lov
     *
     * @param \EffetB\BeezupApi\Model\BeezUPCommonLOVLink3 $store_optimisation_rule_execution_status_lov store_optimisation_rule_execution_status_lov
     *
     * @return $this
     */
    public function setStoreOptimisationRuleExecutionStatusLov($store_optimisation_rule_execution_status_lov)
    {
        $this->container['store_optimisation_rule_execution_status_lov'] = $store_optimisation_rule_execution_status_lov;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


